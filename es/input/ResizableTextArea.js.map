{"version":3,"sources":["input/ResizableTextArea.jsx"],"names":["React","ResizeObserver","omit","classNames","calculateNodeHeight","raf","ResizableTextArea","props","saveTextArea","textArea","handleResize","size","autoSize","onResize","resizeOnNextFrame","cancel","nextFrameActionId","resizeTextarea","minRows","maxRows","textareaStyles","setState","resizing","resizeFrameId","renderTextArea","prefixCls","className","disabled","state","otherProps","cls","value","style","overflow","prevProps","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport ResizeObserver from 'rc-resize-observer';\nimport omit from 'omit.js';\nimport classNames from 'classnames';\nimport calculateNodeHeight from './calculateNodeHeight';\nimport raf from '../_util/raf';\nclass ResizableTextArea extends React.Component {\n    constructor(props) {\n        super(props);\n        this.saveTextArea = (textArea) => {\n            this.textArea = textArea;\n        };\n        this.handleResize = (size) => {\n            const { autoSize, onResize } = this.props;\n            if (typeof onResize === 'function') {\n                onResize(size);\n            }\n            if (autoSize) {\n                this.resizeOnNextFrame();\n            }\n        };\n        this.resizeOnNextFrame = () => {\n            raf.cancel(this.nextFrameActionId);\n            this.nextFrameActionId = raf(this.resizeTextarea);\n        };\n        this.resizeTextarea = () => {\n            const { autoSize } = this.props;\n            if (!autoSize || !this.textArea) {\n                return;\n            }\n            const { minRows, maxRows } = autoSize;\n            const textareaStyles = calculateNodeHeight(this.textArea, false, minRows, maxRows);\n            this.setState({ textareaStyles, resizing: true }, () => {\n                raf.cancel(this.resizeFrameId);\n                this.resizeFrameId = raf(() => {\n                    this.setState({ resizing: false });\n                });\n            });\n        };\n        this.renderTextArea = () => {\n            const { prefixCls, autoSize, onResize, className, disabled } = this.props;\n            const { textareaStyles, resizing } = this.state;\n            const otherProps = omit(this.props, [\n                'prefixCls',\n                'onPressEnter',\n                'autoSize',\n                'defaultValue',\n                'allowClear',\n                'onResize',\n            ]);\n            const cls = classNames(prefixCls, className, {\n                [`${prefixCls}-disabled`]: disabled,\n            });\n            // Fix https://github.com/ant-design/ant-design/issues/6776\n            // Make sure it could be reset when using form.getFieldDecorator\n            if ('value' in otherProps) {\n                otherProps.value = otherProps.value || '';\n            }\n            const style = Object.assign(Object.assign(Object.assign({}, this.props.style), textareaStyles), (resizing ? { overflow: 'hidden' } : null));\n            return (<ResizeObserver onResize={this.handleResize} disabled={!(autoSize || onResize)}>\n        <textarea {...otherProps} className={cls} style={style} ref={this.saveTextArea}/>\n      </ResizeObserver>);\n        };\n        this.state = {\n            textareaStyles: {},\n            resizing: false,\n        };\n    }\n    componentDidMount() {\n        this.resizeTextarea();\n    }\n    componentDidUpdate(prevProps) {\n        // Re-render with the new content then recalculate the height as required.\n        if (prevProps.value !== this.props.value) {\n            this.resizeTextarea();\n        }\n    }\n    componentWillUnmount() {\n        raf.cancel(this.nextFrameActionId);\n        raf.cancel(this.resizeFrameId);\n    }\n    render() {\n        return this.renderTextArea();\n    }\n}\nexport default ResizableTextArea;\n"],"file":"ResizableTextArea.js"}