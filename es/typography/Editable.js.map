{"version":3,"sources":["typography/Editable.jsx"],"names":["React","classNames","KeyCode","EnterOutlined","TextArea","Editable","arguments","inComposition","state","current","onChange","value","target","setState","replace","onCompositionStart","onCompositionEnd","onKeyDown","keyCode","lastKeyCode","onKeyUp","ctrlKey","altKey","metaKey","shiftKey","onCancel","props","ENTER","confirmChange","ESC","onBlur","onSave","trim","setTextarea","textarea","focus","prefixCls","ariaLabel","className","style","direction","textAreaClassName","nextProps","prevState","prevValue","newState","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from 'rc-util/lib/KeyCode';\nimport { EnterOutlined } from '@ant-design/icons';\nimport TextArea from '../input/TextArea';\nclass Editable extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.inComposition = false;\n        this.state = {\n            current: '',\n        };\n        this.onChange = ({ target: { value } }) => {\n            this.setState({ current: value.replace(/[\\r\\n]/g, '') });\n        };\n        this.onCompositionStart = () => {\n            this.inComposition = true;\n        };\n        this.onCompositionEnd = () => {\n            this.inComposition = false;\n        };\n        this.onKeyDown = ({ keyCode }) => {\n            // We don't record keyCode when IME is using\n            if (this.inComposition)\n                return;\n            this.lastKeyCode = keyCode;\n        };\n        this.onKeyUp = ({ keyCode, ctrlKey, altKey, metaKey, shiftKey, }) => {\n            const { onCancel } = this.props;\n            // Check if it's a real key\n            if (this.lastKeyCode === keyCode &&\n                !this.inComposition &&\n                !ctrlKey &&\n                !altKey &&\n                !metaKey &&\n                !shiftKey) {\n                if (keyCode === KeyCode.ENTER) {\n                    this.confirmChange();\n                }\n                else if (keyCode === KeyCode.ESC) {\n                    onCancel();\n                }\n            }\n        };\n        this.onBlur = () => {\n            this.confirmChange();\n        };\n        this.confirmChange = () => {\n            const { current } = this.state;\n            const { onSave } = this.props;\n            onSave(current.trim());\n        };\n        this.setTextarea = (textarea) => {\n            this.textarea = textarea;\n        };\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const { prevValue } = prevState;\n        const { value } = nextProps;\n        const newState = {\n            prevValue: value,\n        };\n        if (prevValue !== value) {\n            newState.current = value;\n        }\n        return newState;\n    }\n    componentDidMount() {\n        if (this.textarea) {\n            this.textarea.focus();\n        }\n    }\n    render() {\n        const { current } = this.state;\n        const { prefixCls, 'aria-label': ariaLabel, className, style, direction } = this.props;\n        const textAreaClassName = classNames(prefixCls, className, `${prefixCls}-edit-content`, {\n            [`${prefixCls}-rtl`]: direction === 'rtl',\n        });\n        return (<div className={textAreaClassName} style={style}>\n        <TextArea ref={this.setTextarea} value={current} onChange={this.onChange} onKeyDown={this.onKeyDown} onKeyUp={this.onKeyUp} onCompositionStart={this.onCompositionStart} onCompositionEnd={this.onCompositionEnd} onBlur={this.onBlur} aria-label={ariaLabel} autoSize/>\n        <EnterOutlined className={`${prefixCls}-edit-content-confirm`}/>\n      </div>);\n    }\n}\nexport default Editable;\n"],"file":"Editable.js"}