{"version":3,"sources":["tree-select/index.jsx"],"names":["TreeSelect","props","selectRef","React","createRef","renderTreeSelect","getContextPopupContainer","getPopupContainer","getPrefixCls","renderEmpty","direction","customizePrefixCls","prefixCls","size","className","treeCheckable","multiple","listHeight","listItemHeight","notFoundContent","switcherIcon","treeLine","dropdownClassName","treePrefixCls","treeSelectPrefixCls","mergedClassName","mergedDropdownClassName","isMultiple","suffixIcon","itemIcon","removeIcon","clearIcon","mergedNotFound","undefined","selectProps","nodeProps","collapseMotion","current","focus","blur","Component","TreeNode","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","defaultProps","transitionName","choiceTransitionName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport RcTreeSelect, { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD, } from 'rc-tree-select';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport { ConfigConsumer } from '../config-provider';\nimport collapseMotion from '../_util/motion';\nimport warning from '../_util/warning';\nimport getIcons from '../select/utils/iconUtil';\nimport renderSwitcherIcon from '../tree/utils/iconUtil';\nclass TreeSelect extends React.Component {\n    constructor(props) {\n        super(props);\n        this.selectRef = React.createRef();\n        this.renderTreeSelect = ({ getPopupContainer: getContextPopupContainer, getPrefixCls, renderEmpty, direction, }) => {\n            const { prefixCls: customizePrefixCls, size, className, treeCheckable, multiple, listHeight = 256, listItemHeight = 32, notFoundContent, switcherIcon, treeLine, getPopupContainer, dropdownClassName, } = this.props;\n            const prefixCls = getPrefixCls('select', customizePrefixCls);\n            const treePrefixCls = getPrefixCls('select-tree', customizePrefixCls);\n            const treeSelectPrefixCls = getPrefixCls('tree-select', customizePrefixCls);\n            const mergedClassName = classNames(!customizePrefixCls && treeSelectPrefixCls, {\n                [`${prefixCls}-lg`]: size === 'large',\n                [`${prefixCls}-sm`]: size === 'small',\n                [`${prefixCls}-rtl`]: direction === 'rtl',\n            }, className);\n            const mergedDropdownClassName = classNames(dropdownClassName, `${treeSelectPrefixCls}-dropdown`, {\n                [`${treeSelectPrefixCls}-dropdown-rtl`]: direction === 'rtl',\n            });\n            const isMultiple = !!(treeCheckable || multiple);\n            // ===================== Icons =====================\n            const { suffixIcon, itemIcon, removeIcon, clearIcon } = getIcons(Object.assign(Object.assign({}, this.props), { multiple: isMultiple }));\n            // ===================== Empty =====================\n            let mergedNotFound;\n            if (notFoundContent !== undefined) {\n                mergedNotFound = notFoundContent;\n            }\n            else {\n                mergedNotFound = renderEmpty('Select');\n            }\n            // ==================== Render =====================\n            const selectProps = omit(this.props, [\n                'prefixCls',\n                'suffixIcon',\n                'itemIcon',\n                'removeIcon',\n                'clearIcon',\n                'switcherIcon',\n                'size',\n            ]);\n            return (<RcTreeSelect {...selectProps} ref={this.selectRef} prefixCls={prefixCls} className={mergedClassName} listHeight={listHeight} listItemHeight={listItemHeight} treeCheckable={treeCheckable ? <span className={`${prefixCls}-tree-checkbox-inner`}/> : treeCheckable} inputIcon={suffixIcon} menuItemSelectedIcon={itemIcon} removeIcon={removeIcon} clearIcon={clearIcon} switcherIcon={(nodeProps) => renderSwitcherIcon(treePrefixCls, switcherIcon, treeLine, nodeProps)} showTreeIcon={false} notFoundContent={mergedNotFound} getPopupContainer={getPopupContainer || getContextPopupContainer} treeMotion={collapseMotion} dropdownClassName={mergedDropdownClassName}/>);\n        };\n        warning(props.multiple !== false || !props.treeCheckable, 'TreeSelect', '`multiple` will alway be `true` when `treeCheckable` is true');\n    }\n    focus() {\n        if (this.selectRef.current) {\n            this.selectRef.current.focus();\n        }\n    }\n    blur() {\n        if (this.selectRef.current) {\n            this.selectRef.current.blur();\n        }\n    }\n    render() {\n        return <ConfigConsumer>{this.renderTreeSelect}</ConfigConsumer>;\n    }\n}\nTreeSelect.TreeNode = TreeNode;\nTreeSelect.SHOW_ALL = SHOW_ALL;\nTreeSelect.SHOW_PARENT = SHOW_PARENT;\nTreeSelect.SHOW_CHILD = SHOW_CHILD;\nTreeSelect.defaultProps = {\n    transitionName: 'slide-up',\n    choiceTransitionName: 'zoom',\n};\nexport { TreeNode };\nexport default TreeSelect;\n"],"file":"index.js"}